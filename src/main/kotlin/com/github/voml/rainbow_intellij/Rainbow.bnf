{
    parserClass = "com.github.voml.rainbow_intellij.language.parser.RbParser"
    parserUtilClass = "com.github.voml.rainbow_intellij.language.psi.RbParserUtil"



    psiClassPrefix = "Rain"
    psiImplClassSuffix = "Node"
    psiPackage = "com.github.voml.rainbow_intellij.language.psi"
    psiImplPackage = "com.github.voml.rainbow_intellij.language.psi_node"

    elementTypeHolderClass = "com.github.voml.rainbow_intellij.language.psi.RbToken"
    elementTypeClass = "com.github.voml.rainbow_intellij.language.psi.RbElementType"
    tokenTypeClass = "com.github.voml.rainbow_intellij.language.psi.RbTokenType"

    extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"
    psiImplUtilClass = "com.github.voml.rainbow_intellij.language.ast.RainAstExtension"

    tokens = [
        // comment
        COMMENT_DOCUMENT = 'Comment Document'
        COMMENT = 'Comment'
        COMMENT_BLOCK = 'Comment Block'

        // literal
        URL = 'Url'
        SYMBOL = 'Symbol'
        STRING_RAW = 'String'

        BYTE = 'Byte'
        INTEGER = 'Integer'
        DECIMAL = 'Decimal'
        SIGN = 'regexp:[+-]'

        PARENTHESIS_L = '('
        PARENTHESIS_R = ')'
        BRACKET_L = '['
        BRACKET_R = ']'
        BRACE_L = '{'
        BRACE_R = '}'
        ANGLE_L = '<'
        ANGLE_R = '>'
        ACCENT = '^'
        EQ = '='
        COLON = ':'
        SEMICOLON = ';'
        COMMA = ','
        DOLLAR = '$'
        DOT = '.'
        STAR = '*'
        AT = '@'
//      SPACE='regexp:\s+'
//      ANY = 'regexp:.'
    ]
}

Rb ::= statement*;

private statement ::=
    schema_statement
  | meta_statement
  | global_statement
  | language_statement
  | COMMENT_DOCUMENT
  | ignore;
private ignore ::= SEMICOLON | COMMA;
// ---------------------------------------------------------------------------------------------------------------------
// schema <ID>: <TYPE> { }
schema_statement ::= "schema" identifier <<brace_block attribute_statement ignore>> {
    mixin = "com.github.voml.rainbow_intellij.language.mixin.MixinSchema"
    methods = [getKeyword]
};
// ---------------------------------------------------------------------------------------------------------------------
meta_statement ::= "meta" <<brace_block attribute_statement ignore>> {
    mixin = "com.github.voml.rainbow_intellij.language.mixin.MixinMeta"
    methods = [getKeyword]
};
// ---------------------------------------------------------------------------------------------------------------------
global_statement ::= "global" <<brace_block attribute_statement ignore>> {
    mixin = "com.github.voml.rainbow_intellij.language.mixin.MixinGlobal"
    methods = [getKeyword]
};
// ---------------------------------------------------------------------------------------------------------------------
language_statement ::= "language" identifier [COLON language_inherit] <<brace_block attribute_statement ignore>> {
    mixin = "com.github.voml.rainbow_intellij.language.mixin.MixinLanguage"
    methods = [getKeyword]
};
language_inherit ::= identifier;
// ---------------------------------------------------------------------------------------------------------------------
// properties <ID>: <TYPE> { }
attribute_statement ::= key eq (object_inherit|value+) {
    mixin = "com.github.voml.rainbow_intellij.language.mixin.MixinAttribute"
};
field_statement ::= key eq value {
    mixin = "com.github.voml.rainbow_intellij.language.mixin.MixinField"
};
// ---------------------------------------------------------------------------------------------------------------------
array ::= <<bracket_block value ignore>>;
object ::= <<brace_block field_statement ignore>>;
// ---------------------------------------------------------------------------------------------------------------------
key ::= string_inline | identifier;
private eq ::= EQ | COLON;
value ::= array | data | namespace;
private data ::= null | boolean | number | string | literal;
// ---------------------------------------------------------------------------------------------------------------------
object_inherit ::= namespace? object;
// ---------------------------------------------------------------------------------------------------------------------
number ::= [SIGN] (INTEGER | DECIMAL) | [SIGN] BYTE;
// ---------------------------------------------------------------------------------------------------------------------
string ::= (string_inline|string_multi);
string_inline ::= STRING_RAW;
string_multi ::= STRING_RAW;
// ---------------------------------------------------------------------------------------------------------------------
namespace  ::= identifier (DOT identifier)*;
identifier ::= SYMBOL;
literal    ::= COLOR | MACRO | "true" | "false" | "null";
// ---------------------------------------------------------------------------------------------------------------------
// parenthesis ( )
private meta parenthesis ::= PARENTHESIS_L <<param>> PARENTHESIS_R;
// bracket [ ]
meta bracket_block ::= BRACKET_L [<<item>> (<<sp>> <<item>>)* [<<sp>>]] BRACKET_R;
// brace { }
meta brace_block ::=BRACE_L (<<item>>|<<sp>>)* BRACE_R;

