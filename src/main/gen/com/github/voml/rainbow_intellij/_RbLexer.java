/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.github.voml.rainbow_intellij;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.voml.rainbow_intellij.language.psi.RbToken.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Rainbow.flex</tt>
 */
public class _RbLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 16896 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\21\1\23\1\21\14\24\1\25\50\24\1\26\2\24\1\27\1\30\1\31\1\32"+
    "\25\24\1\33\20\21\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\21\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\21\1\24\1\56\1\57\5\21\2\24\1\60"+
    "\7\21\1\24\1\61\20\21\1\24\1\62\1\21\1\63\13\24\1\64\1\24\1\65\22\21\1\66"+
    "\5\21\1\67\11\21\1\70\1\71\1\72\1\73\1\21\1\74\2\21\1\75\3\21\1\76\2\21\1"+
    "\77\10\21\123\24\1\100\7\24\1\101\1\102\12\24\1\103\24\21\1\24\1\104\u0582"+
    "\21\1\105\u017f\21");

  /* The ZZ_CMAP_Y table has 4480 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\6\2\7\1\11\1\12\3\0\1\13\1\14"+
    "\1\15\1\14\2\7\1\16\3\7\1\16\71\7\1\17\1\7\1\20\1\0\1\21\1\22\2\0\16\23\1"+
    "\24\1\25\1\26\1\27\2\7\1\30\11\7\1\31\21\7\1\32\1\33\24\7\1\34\3\7\1\16\1"+
    "\35\1\34\4\7\1\0\1\36\4\23\1\37\1\40\1\0\3\7\2\41\3\0\1\23\1\42\5\7\1\43\3"+
    "\23\1\44\1\45\13\7\1\46\1\47\1\50\1\51\1\23\1\52\2\0\1\53\3\7\3\23\1\54\12"+
    "\7\1\55\1\23\1\56\1\0\1\23\1\57\3\7\1\43\1\60\1\14\2\7\1\55\1\61\1\62\1\63"+
    "\2\0\3\7\1\64\10\0\2\7\1\24\1\65\2\0\1\66\1\23\1\67\3\23\1\70\6\7\1\71\2\23"+
    "\1\72\1\7\1\73\1\23\1\34\1\7\1\74\1\75\1\76\2\7\1\77\1\100\1\101\1\47\1\102"+
    "\1\103\1\104\1\73\1\23\1\20\1\0\1\105\1\106\1\76\2\7\1\77\1\107\1\110\1\111"+
    "\1\112\1\113\1\114\1\115\1\23\1\116\1\0\1\105\1\31\1\30\2\7\1\77\1\117\1\101"+
    "\1\37\1\120\1\121\1\0\1\73\1\23\1\0\1\35\1\105\1\75\1\76\2\7\1\77\1\117\1"+
    "\101\1\47\1\112\1\115\1\104\1\73\1\23\1\35\1\0\1\122\1\123\1\124\1\125\1\126"+
    "\1\123\1\7\1\127\1\130\1\131\1\132\1\0\1\115\1\23\2\0\1\133\1\24\1\77\2\7"+
    "\1\77\1\7\1\134\1\135\1\131\1\136\1\41\1\73\1\23\2\0\1\74\1\24\1\77\2\7\1"+
    "\77\1\137\1\101\1\135\1\131\1\136\1\140\1\73\1\23\1\141\1\0\1\105\1\24\1\77"+
    "\4\7\1\142\1\135\1\143\1\144\1\145\1\73\1\23\1\0\1\33\1\146\1\7\1\16\1\33"+
    "\2\7\1\30\1\147\1\16\1\150\1\151\1\23\1\115\1\23\1\152\1\0\1\34\5\7\1\153"+
    "\1\42\1\154\1\155\1\23\1\156\4\0\1\157\1\160\1\161\1\34\1\162\1\163\1\153"+
    "\1\164\1\165\1\166\1\23\1\167\4\0\1\121\2\0\1\156\1\23\1\156\1\170\1\171\1"+
    "\7\1\34\3\7\1\21\1\36\1\23\1\135\1\172\1\23\1\36\3\23\1\173\1\174\7\0\5\7"+
    "\1\43\1\23\1\175\1\23\1\156\1\55\1\176\1\177\1\200\1\201\1\7\1\202\1\203\1"+
    "\23\1\166\4\7\1\31\1\204\5\7\1\205\51\7\1\124\1\16\1\124\5\7\1\124\4\7\1\124"+
    "\1\16\1\124\1\7\1\16\7\7\1\124\10\7\1\206\1\0\1\36\1\156\1\0\2\7\2\0\12\7"+
    "\2\65\1\34\114\7\1\75\2\7\1\207\2\7\1\41\11\7\1\123\1\7\1\121\1\7\1\24\1\210"+
    "\1\0\2\7\1\210\1\0\2\7\1\211\1\0\1\7\1\24\1\212\1\0\6\7\1\213\3\23\1\214\1"+
    "\215\1\23\1\156\3\0\1\216\1\23\1\156\13\7\1\0\5\7\1\217\10\7\1\65\1\0\3\7"+
    "\1\16\1\23\1\220\1\23\1\220\1\115\1\23\3\7\1\65\1\21\1\0\5\7\1\221\3\7\1\20"+
    "\1\23\1\42\4\0\2\7\1\154\1\220\6\7\1\172\1\155\3\23\1\47\1\23\1\156\1\23\1"+
    "\156\1\145\1\0\1\23\1\166\10\0\1\222\5\7\1\213\1\23\1\222\1\221\1\23\1\156"+
    "\1\0\1\223\1\220\1\0\1\224\3\7\1\72\1\200\1\23\1\57\4\7\1\55\1\23\1\220\1"+
    "\0\4\7\1\213\2\23\1\0\1\23\1\225\1\23\1\57\3\7\1\65\1\7\1\121\10\0\1\226\2"+
    "\23\1\227\1\230\1\156\30\7\6\23\1\166\1\223\42\7\2\65\4\7\2\65\1\7\1\231\3"+
    "\7\1\65\6\7\1\24\1\165\1\232\1\21\1\233\1\221\1\7\1\21\1\232\1\21\1\234\1"+
    "\235\3\0\1\236\1\0\1\103\1\237\1\0\1\240\1\241\2\0\1\35\1\145\2\0\1\7\1\21"+
    "\6\0\1\23\1\173\1\242\1\23\1\237\1\0\1\243\1\33\1\147\1\65\1\22\1\77\1\7\1"+
    "\244\1\245\1\246\2\0\5\7\1\121\116\0\5\7\1\16\5\7\1\16\20\7\1\21\1\247\1\250"+
    "\1\0\4\7\1\31\1\204\7\7\1\145\1\0\1\103\2\7\1\16\1\0\10\16\4\23\1\251\3\0"+
    "\1\34\1\202\1\252\1\21\1\34\11\7\1\16\1\253\1\34\12\7\1\205\1\245\4\7\1\65"+
    "\1\34\12\7\1\16\2\0\3\7\1\41\6\0\170\7\1\65\11\0\72\7\1\65\5\0\21\7\1\21\10"+
    "\0\5\7\1\65\41\7\1\21\2\7\1\23\1\250\2\0\5\7\1\154\1\66\1\254\3\7\1\55\12"+
    "\7\1\156\3\0\1\145\1\7\1\33\14\7\1\76\3\7\1\16\1\7\7\0\1\145\1\7\1\255\1\256"+
    "\2\7\1\43\3\0\6\7\1\221\1\0\1\57\5\7\1\213\1\23\1\166\1\0\1\23\1\156\2\23"+
    "\1\57\1\257\1\23\1\57\2\7\1\55\1\166\2\7\1\154\1\23\1\220\1\0\3\7\1\21\1\70"+
    "\5\7\1\43\1\23\1\237\1\145\1\23\1\156\1\260\1\7\1\23\1\261\5\7\1\72\1\155"+
    "\1\0\1\256\1\262\1\23\1\156\2\7\1\16\1\263\6\7\1\177\1\264\1\217\2\0\1\265"+
    "\1\7\1\43\1\266\1\0\3\267\1\0\2\16\5\7\1\205\1\65\1\0\16\7\1\43\1\270\1\23"+
    "\1\156\64\7\1\221\1\0\2\7\1\16\1\271\5\7\1\221\40\0\55\7\1\65\15\7\1\20\4"+
    "\0\1\16\1\0\1\271\1\272\1\7\1\77\1\16\1\165\1\273\15\7\1\20\3\0\1\271\20\7"+
    "\1\65\1\161\32\7\1\65\2\0\10\7\1\33\6\7\5\0\1\7\1\20\2\23\2\0\2\23\1\274\2"+
    "\0\1\275\4\0\1\276\1\231\17\7\1\21\2\0\1\23\1\156\1\34\2\7\1\277\1\34\2\7"+
    "\1\41\1\300\6\7\1\55\3\7\1\16\3\33\1\301\4\0\1\7\1\137\2\7\1\16\2\7\1\302"+
    "\1\7\1\65\1\7\1\65\4\0\17\7\1\41\10\0\6\7\1\21\20\0\1\303\20\0\3\7\1\21\6"+
    "\7\1\121\1\0\1\237\3\0\4\7\2\0\3\7\1\41\4\7\1\55\1\42\3\7\1\65\4\7\1\221\1"+
    "\7\1\252\5\0\23\7\1\65\1\23\1\156\4\7\1\221\4\7\1\221\5\7\1\0\6\7\1\221\23"+
    "\0\46\7\1\16\1\0\2\7\1\65\1\0\1\7\23\0\1\65\1\77\4\7\1\31\1\304\2\7\1\65\1"+
    "\0\2\7\1\16\1\0\3\7\1\16\10\0\2\7\1\305\1\0\2\7\1\65\1\0\3\7\1\20\10\0\7\7"+
    "\1\300\10\0\1\306\1\66\1\137\1\34\2\7\1\221\1\111\4\0\3\7\1\21\3\7\1\21\4"+
    "\0\1\7\1\34\2\7\1\307\3\0\6\7\1\65\1\0\2\7\1\65\1\0\2\7\1\41\1\0\2\7\1\20"+
    "\15\0\11\7\1\121\6\0\6\7\1\41\1\0\6\7\1\41\41\0\1\224\6\7\1\23\1\155\3\0\1"+
    "\115\1\23\1\0\1\103\1\224\5\7\1\23\1\42\2\0\3\7\1\121\1\23\1\156\1\224\3\7"+
    "\1\154\1\23\1\135\1\23\2\0\4\7\1\310\1\0\1\224\5\7\1\43\1\23\1\311\1\312\1"+
    "\23\1\313\4\0\2\7\1\30\2\7\1\213\1\23\1\174\10\0\1\16\1\314\1\7\1\31\1\7\1"+
    "\121\5\7\1\154\1\23\1\42\1\23\1\156\1\133\1\75\1\76\2\7\1\77\1\117\1\101\1"+
    "\47\1\112\1\132\1\245\1\73\2\173\21\0\6\7\1\172\1\23\1\175\1\41\1\23\1\156"+
    "\4\0\6\7\2\23\1\315\1\0\1\23\1\156\24\0\5\7\1\154\1\166\1\23\1\237\2\0\1\262"+
    "\4\0\6\7\2\23\1\316\1\0\1\23\1\156\4\0\5\7\1\43\1\23\1\0\1\23\1\156\6\0\3"+
    "\7\1\317\1\23\1\220\1\23\1\156\54\0\10\7\1\23\1\156\1\0\1\145\70\0\7\7\1\121"+
    "\40\0\1\7\1\77\3\7\1\154\1\155\1\23\1\121\1\0\1\23\1\156\2\0\1\33\3\7\1\320"+
    "\2\23\1\36\1\155\51\0\63\7\1\20\14\0\15\7\1\16\2\0\30\7\1\221\27\0\5\7\1\16"+
    "\72\0\10\7\1\16\67\0\7\7\1\121\3\7\1\16\1\23\1\156\14\0\3\7\1\65\1\173\1\0"+
    "\6\7\1\155\1\0\1\221\1\0\1\23\1\156\1\271\2\7\1\245\2\7\56\0\10\7\1\21\1\0"+
    "\1\72\4\23\1\155\1\0\1\103\1\224\1\7\10\0\1\121\3\0\75\7\1\21\2\0\36\7\1\41"+
    "\41\0\1\20\77\0\15\7\1\41\1\7\1\21\1\7\1\121\1\7\1\321\130\0\1\275\1\322\1"+
    "\42\1\223\1\323\1\220\3\0\1\324\22\0\1\312\67\0\12\7\1\24\10\7\1\24\1\325"+
    "\1\326\1\7\1\327\1\137\7\7\1\31\1\330\2\24\3\7\1\331\1\165\1\33\1\77\51\7"+
    "\1\65\3\7\1\77\2\7\1\205\3\7\1\205\2\7\1\24\3\7\1\24\2\7\1\16\3\7\1\16\3\7"+
    "\1\77\3\7\1\77\2\7\1\205\1\332\14\23\1\155\1\223\5\23\1\173\1\303\1\0\1\240"+
    "\2\0\1\223\1\36\1\23\52\0\1\155\2\23\1\333\1\334\1\42\72\0\30\7\1\21\1\0\1"+
    "\155\5\0\10\7\1\213\1\42\1\23\1\156\24\0\1\137\3\7\1\157\1\34\1\205\1\335"+
    "\1\243\1\336\1\157\1\231\1\157\2\205\1\114\1\7\1\30\1\7\1\221\1\337\1\30\1"+
    "\7\1\221\50\0\32\7\1\16\5\0\106\7\1\21\1\0\33\7\1\65\120\7\1\20\53\0\3\7\1"+
    "\65\134\0\36\23\2\0");

  /* The ZZ_CMAP_A table has 1792 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\2\1\1\2\2\0\1\3\1\0\1\13\1\10\1\40\3\0\1\24\1\25\1\5\1\21\1"+
    "\37\1\22\1\17\1\4\1\15\11\12\1\23\1\36\1\32\1\35\1\33\2\0\4\11\1\20\1\11\14"+
    "\6\1\26\1\14\1\27\1\34\1\16\3\6\1\30\1\0\1\31\7\0\1\1\2\0\1\3\11\0\1\6\12"+
    "\0\1\6\1\0\1\7\7\6\1\0\2\6\4\0\4\6\6\0\5\6\7\0\1\6\1\0\1\6\1\0\10\7\5\6\1"+
    "\0\2\6\3\0\3\6\1\0\1\6\6\0\1\6\1\7\3\6\1\0\1\6\1\0\4\6\1\0\13\6\1\0\3\6\1"+
    "\0\5\7\2\0\6\6\1\0\7\6\1\0\1\6\7\0\15\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\1\7\3"+
    "\6\5\0\3\7\5\0\3\6\7\7\4\0\2\6\1\7\13\6\1\0\1\6\7\7\2\0\6\7\2\6\2\7\1\0\4"+
    "\7\2\6\2\7\3\6\2\0\2\6\1\7\6\6\3\7\2\0\11\6\3\7\1\6\6\0\2\7\6\6\4\7\2\6\2"+
    "\0\2\7\1\6\11\7\1\6\3\7\1\6\5\7\2\0\1\6\3\7\4\0\6\6\6\0\6\7\1\0\11\7\6\6\3"+
    "\7\1\6\2\7\1\6\7\7\2\6\2\7\2\0\2\7\1\6\3\7\1\0\10\6\2\0\2\6\2\0\6\6\1\0\7"+
    "\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6\3\7\2\0\3\7\1\6\10\0\1\7\4\0\2\6\1\0\1\6\1"+
    "\0\3\7\1\0\6\6\4\0\2\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0"+
    "\3\7\3\0\1\7\7\0\4\6\1\0\1\6\7\0\4\7\3\6\1\7\2\0\1\6\1\0\2\6\1\0\3\6\2\7\1"+
    "\0\3\7\2\0\1\6\11\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2"+
    "\6\3\0\2\6\3\0\2\6\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6\6\0\5\7\1\0\5\6\3\0\1\6"+
    "\7\7\1\0\2\7\5\0\2\7\1\0\4\6\1\0\3\6\6\0\1\6\2\0\2\6\5\0\3\6\2\0\1\6\3\7\1"+
    "\0\4\7\1\6\5\0\3\6\1\7\7\0\1\6\2\0\2\7\1\0\7\6\1\0\1\6\4\0\1\7\4\0\6\7\1\0"+
    "\1\7\3\0\2\7\4\0\1\6\1\7\1\6\5\7\7\6\10\7\1\0\2\7\7\0\2\6\1\0\1\6\2\0\2\6"+
    "\1\0\1\6\2\0\1\6\6\0\4\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\3\6\2\7\1\0\2"+
    "\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0\2\7\2\0\4\6\5\0\1\7\1\0\1\7\1\0\1\7\4\0"+
    "\2\7\5\6\10\7\11\0\1\7\1\0\7\7\1\6\2\7\4\6\3\7\1\6\3\7\2\6\7\7\3\6\4\7\5\6"+
    "\14\7\1\6\1\7\5\0\1\6\2\0\3\6\1\0\7\6\2\0\3\7\1\3\11\6\3\7\3\0\2\6\2\7\4\0"+
    "\1\6\1\0\2\7\4\0\4\6\10\7\3\0\1\6\4\0\1\6\1\7\5\0\3\7\2\0\1\6\1\7\1\6\5\0"+
    "\4\7\4\0\4\6\4\0\5\7\3\6\3\0\10\7\5\6\2\7\3\0\3\6\3\7\1\0\5\7\4\6\1\7\4\6"+
    "\3\7\2\6\2\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\2\0\3\6\1\0\6\6\2\0\2\6\13\3\5\0"+
    "\2\1\5\0\1\3\1\7\13\0\1\7\12\0\1\3\1\0\1\7\3\0\3\7\2\0\1\6\4\0\3\6\2\0\4\6"+
    "\5\0\5\6\4\0\1\6\4\0\4\6\3\7\2\6\4\0\1\3\4\0\3\6\1\0\5\6\3\0\2\7\2\0\3\6\6"+
    "\7\1\0\3\6\1\7\3\6\1\7\4\6\1\7\4\6\3\0\1\6\1\0\1\6\2\0\5\6\1\7\2\6\2\7\5\6"+
    "\1\0\4\6\2\7\4\0\1\6\3\7\2\6\1\7\5\6\2\7\3\0\3\6\4\0\3\6\2\7\2\0\6\6\1\0\3"+
    "\7\1\0\2\7\5\0\5\6\5\0\1\6\1\7\3\6\1\0\2\6\1\0\2\6\3\0\2\7\10\0\3\7\1\0\1"+
    "\6\1\0\1\6\3\0\4\6\4\0\1\7\6\0\2\6\2\0\3\6\3\0\3\6\1\0\2\6\1\0\1\6\5\0\1\7"+
    "\2\0\1\6\3\0\1\6\2\0\4\6\1\0\2\6\2\0\1\6\3\7\1\0\2\7\1\0\5\6\2\7\1\0\3\6\1"+
    "\7\2\0\1\6\1\0\1\7\4\6\5\0\3\7\3\0\2\7\1\6\1\0\1\6\3\0\1\6\1\0\4\6\1\0\1\6"+
    "\4\7\2\6\1\0\1\6\1\7\3\0\1\6\3\0\2\6\3\0\3\7\2\0\6\7\2\6\3\0\2\7\1\0\2\7\3"+
    "\0\6\7\2\0\3\7\2\0\4\7\4\0\1\6\2\0\2\6\2\0\4\6\1\0\4\6\1\0\1\6\1\0\6\6\2\0"+
    "\5\6\1\0\4\6\1\0\4\6\2\0\3\7\2\0\7\7\1\0\2\7\1\0\2\7\1\0\1\6\1\0\1\6\5\0\1"+
    "\6\1\0\1\6\1\0\3\6\1\0\3\6\1\0\3\6");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\1\1\5"+
    "\1\1\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\0\1\27\1\5\1\30\1\0"+
    "\1\31\2\0\1\30\1\26\1\32\3\0\1\33\1\30";

  private static int [] zzUnpackAction() {
    int [] result = new int[43];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\41\0\102\0\143\0\41\0\204\0\245\0\306"+
    "\0\347\0\u0108\0\u0129\0\41\0\41\0\41\0\41\0\41"+
    "\0\41\0\41\0\41\0\41\0\41\0\41\0\41\0\41"+
    "\0\41\0\41\0\u014a\0\u016b\0\245\0\u018c\0\u01ad\0\347"+
    "\0\41\0\u01ce\0\u0108\0\u01ef\0\u0210\0\u0231\0\u0252\0\u0273"+
    "\0\u0294\0\41\0\u0294";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[43];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\2\1\7\1\6"+
    "\1\10\1\11\1\2\1\12\1\6\1\13\1\6\2\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\42\0\3\3"+
    "\41\0\1\33\1\34\41\0\2\6\1\0\2\6\2\0"+
    "\2\6\1\0\1\6\1\0\1\6\27\0\2\35\2\0"+
    "\1\35\2\0\1\35\32\0\1\10\2\0\1\10\1\36"+
    "\1\37\21\0\13\40\1\41\1\42\24\40\12\0\1\43"+
    "\2\0\1\43\1\0\1\37\33\0\1\44\2\0\1\44"+
    "\23\0\2\45\1\0\1\45\1\46\34\45\5\34\1\47"+
    "\33\34\12\0\1\36\2\0\2\36\27\0\1\50\4\0"+
    "\1\37\2\0\1\37\23\0\1\40\2\0\36\40\12\0"+
    "\1\44\2\0\1\44\2\0\1\51\20\0\2\45\1\0"+
    "\36\45\2\46\1\0\36\46\4\34\1\52\1\47\33\34"+
    "\5\0\1\51\45\0\1\53\2\0\1\53\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[693];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\6\1\17\11\1\1\1\0"+
    "\3\1\1\0\1\11\2\0\3\1\3\0\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[43];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _RbLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _RbLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 28: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 29: break;
          case 3: 
            { return STAR;
            } 
            // fall through
          case 30: break;
          case 4: 
            { return SYMBOL;
            } 
            // fall through
          case 31: break;
          case 5: 
            { return INTEGER;
            } 
            // fall through
          case 32: break;
          case 6: 
            { return DOT;
            } 
            // fall through
          case 33: break;
          case 7: 
            { return SIGN;
            } 
            // fall through
          case 34: break;
          case 8: 
            { return COLON;
            } 
            // fall through
          case 35: break;
          case 9: 
            { return PARENTHESIS_L;
            } 
            // fall through
          case 36: break;
          case 10: 
            { return PARENTHESIS_R;
            } 
            // fall through
          case 37: break;
          case 11: 
            { return BRACKET_L;
            } 
            // fall through
          case 38: break;
          case 12: 
            { return BRACKET_R;
            } 
            // fall through
          case 39: break;
          case 13: 
            { return BRACE_L;
            } 
            // fall through
          case 40: break;
          case 14: 
            { return BRACE_R;
            } 
            // fall through
          case 41: break;
          case 15: 
            { return ANGLE_L;
            } 
            // fall through
          case 42: break;
          case 16: 
            { return ANGLE_R;
            } 
            // fall through
          case 43: break;
          case 17: 
            { return ACCENT;
            } 
            // fall through
          case 44: break;
          case 18: 
            { return EQ;
            } 
            // fall through
          case 45: break;
          case 19: 
            { return SEMICOLON;
            } 
            // fall through
          case 46: break;
          case 20: 
            { return COMMA;
            } 
            // fall through
          case 47: break;
          case 21: 
            { return DOLLAR;
            } 
            // fall through
          case 48: break;
          case 22: 
            { return COMMENT;
            } 
            // fall through
          case 49: break;
          case 23: 
            { return COLOR;
            } 
            // fall through
          case 50: break;
          case 24: 
            { return DECIMAL;
            } 
            // fall through
          case 51: break;
          case 25: 
            { return STRING;
            } 
            // fall through
          case 52: break;
          case 26: 
            { return COMMENT_DOCUMENT;
            } 
            // fall through
          case 53: break;
          case 27: 
            { return COMMENT_BLOCK;
            } 
            // fall through
          case 54: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
